{"version":3,"file":"static/js/556.409f8863.chunk.js","mappings":"wMAIaA,EACF,mBAILC,EAAW,UADDC,yBACc,qBAEjBC,EAAS,SAACC,GACrB,IAAMC,GAAOC,EAAAA,EAAAA,IAAaF,GAE1B,OAAOG,IAAAA,KACDN,EAAaI,GAClBG,MAAK,SAACC,GAA0C,OAAKA,EAAEJ,IAAI,GAC9D,E,mBCZMK,EAAO,WACX,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,MAIjB,OACE,SAAC,KAAS,CAACC,cAAeJ,EAAUK,iBCTwB,CAC9D,CACEC,OAAQ,SAACC,GAAK,OAAK,SAAC,KAAY,CAACC,WAAYD,EAAOE,MAAM,KAAKC,UAAU,eAAgB,EACzFC,GAAI,KACJC,KAAM,gBAAML,EAAK,wCAAO,SAAC,KAAe,CAACM,MAAON,EAAMb,KAAKa,EAAMO,IAAIC,OAAOC,IAAK,GAEnF,CACEV,OAAQ,SAACC,GAAK,OAAK,SAAC,KAAY,CAACC,WAAYD,EAAOE,MAAM,uCAASC,UAAU,eAAgB,EAC7FC,GAAI,QACJC,KAAM,gBAAML,EAAK,wCAAO,SAAC,KAAe,CAACM,MAAON,EAAMb,KAAKa,EAAMO,IAAIC,OAAOE,OAAQ,GAEtF,CACEX,OAAQ,SAACC,GAAK,OAAK,SAAC,KAAY,CAACC,WAAYD,EAAOE,MAAM,kFAAiBC,UAAU,eAAgB,EACrGC,GAAI,SACJC,KAAM,gBAAML,EAAK,wCAAO,SAAC,KAAe,CAACM,MAAON,EAAMb,KAAKa,EAAMO,IAAIC,OAAOG,QAAS,GAEvF,CACEZ,OAAQ,SAACC,GAAK,OAAK,SAAC,KAAY,CAACC,WAAYD,EAAOE,MAAM,uCAASC,UAAU,eAAgB,EAC7FC,GAAI,QACJC,KAAM,gBAAML,EAAK,wCAAO,SAAC,KAAQ,CAACY,KAAMZ,EAAMb,KAAKa,EAAMO,IAAIC,OAAOK,WAAYC,WAAW,cAAc,IDV/BC,WAH9D,SAAC5B,GAAa,OAAKQ,EAASqB,EAAAA,GAAAA,cAAsB7B,EAAKiB,IAAI,EAGsBa,OAAO,GAExG,EEMA,EAbyB,SAAH,GACpB,OADuC,WAErC,iCACE,SAAC,KAAS,kFACV,SAAC,KAAoB,CAACC,YAAapC,EAAgB,UACjD,SAAC,KAAqB,CAACqC,WAAYlC,EAAQiC,YAAapC,EAAgB,UACtE,SAACU,EAAI,UAKf,C,uBCnBe,SAAS4B,EAA0BC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,sBAAwBD,EAC/D,C","sources":["pages/switches-list/api/requests.ts","pages/switches-list/ui/Grid.tsx","pages/switches-list/ui/dataTableColumns.tsx","pages/switches-list/index.tsx","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\nimport { ISwitch } from \"entities/switch\";\r\nimport { QueryState, getQueryData, Response } from \"shared\";\r\n\r\nexport const QUERIES = {\r\n  GET_ALL: 'Switches_get_all'\r\n}\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL\r\nconst GET_ALL_URL = `${API_URL}/switches/get-all`\r\n\r\nexport const getAll = (query: QueryState): Promise<Response<Array<ISwitch>>> => {\r\n  const data = getQueryData(query)\r\n  \r\n  return axios\r\n  .post(GET_ALL_URL, data)\r\n  .then((d: AxiosResponse<Response<Array<ISwitch>>>) => d.data) \r\n}","import { APP_URL, DataTable, useQueryResponse } from \"shared\";\r\nimport { dataTableColumns } from \"./dataTableColumns\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { ISwitch } from \"entities/switch\";\r\n\r\nconst Grid = () => {\r\n  const response = useQueryResponse()\r\n\r\n  const navigate = useNavigate()\r\n\r\n  const click = (data: ISwitch) => navigate(APP_URL.SWITCHES_VIEW(data.id)) \r\n  \r\n  return (\r\n    <DataTable queryResponse={response} dataTableColumns={dataTableColumns()} onRowClick={click} hover={true}/>\r\n  );\r\n};\r\n\r\nexport {Grid}","import { ISwitch } from \"entities/switch\"\r\nimport { Column } from \"react-table\"\r\nimport { CustomHeader, DateCell, SimpleValueCell } from \"shared\"\r\n\r\nconst dataTableColumns = (): ReadonlyArray<Column<ISwitch>> =>  [\r\n  {\r\n    Header: (props) => <CustomHeader tableProps={props} title='IP' className='min-w-125px' />,\r\n    id: 'ip',\r\n    Cell: ({ ...props }) => <SimpleValueCell value={props.data[props.row.index].ip}/>,\r\n  },\r\n  {\r\n    Header: (props) => <CustomHeader tableProps={props} title='Модель' className='min-w-125px' />,\r\n    id: 'model',\r\n    Cell: ({ ...props }) => <SimpleValueCell value={props.data[props.row.index].model}/>,\r\n  },\r\n  {\r\n    Header: (props) => <CustomHeader tableProps={props} title='Серийный номер' className='min-w-125px' />,\r\n    id: 'serial',\r\n    Cell: ({ ...props }) => <SimpleValueCell value={props.data[props.row.index].serial}/>,\r\n  },\r\n  {\r\n    Header: (props) => <CustomHeader tableProps={props} title='Создан' className='min-w-100px' />,\r\n    id: 'roles',\r\n    Cell: ({ ...props }) => <DateCell date={props.data[props.row.index].created_on} dateFormat=\"DD/MM/YYYY\"/>,\r\n  },\r\n]\r\n\r\nexport { dataTableColumns }","import { PageTitle, QueryRequestProvider, QueryResponseProvider } from \"shared\";\r\nimport { QUERIES, getAll } from \"./api/requests\";\r\nimport { Grid } from \"./ui/Grid\";\r\n\r\ntype Props = {\r\n\r\n}\r\n\r\nconst SwitchesListPage = ({}: Props) => {\r\n  return (\r\n    <>\r\n      <PageTitle>Коммутаторы</PageTitle>\r\n      <QueryRequestProvider requestName={QUERIES.GET_ALL}>\r\n        <QueryResponseProvider getRequest={getAll} requestName={QUERIES.GET_ALL}>\r\n          <Grid/>\r\n        </QueryResponseProvider>\r\n      </QueryRequestProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SwitchesListPage","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}"],"names":["QUERIES","GET_ALL_URL","process","getAll","query","data","getQueryData","axios","then","d","Grid","response","useQueryResponse","navigate","useNavigate","queryResponse","dataTableColumns","Header","props","tableProps","title","className","id","Cell","value","row","index","ip","model","serial","date","created_on","dateFormat","onRowClick","APP_URL","hover","requestName","getRequest","_objectDestructuringEmpty","obj","TypeError"],"sourceRoot":""}